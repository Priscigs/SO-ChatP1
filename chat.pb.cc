// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chat_sistOS {
PROTOBUF_CONSTEXPR UserList::UserList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.list_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserListDefaultTypeInternal() {}
  union {
    UserList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserListDefaultTypeInternal _UserList_default_instance_;
PROTOBUF_CONSTEXPR UsersOnline::UsersOnline(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.users_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UsersOnlineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UsersOnlineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UsersOnlineDefaultTypeInternal() {}
  union {
    UsersOnline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UsersOnlineDefaultTypeInternal _UsersOnline_default_instance_;
PROTOBUF_CONSTEXPR UserOption::UserOption(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.createuser_)*/nullptr
  , /*decltype(_impl_.userlist_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.op_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserOptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserOptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserOptionDefaultTypeInternal() {}
  union {
    UserOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserOptionDefaultTypeInternal _UserOption_default_instance_;
PROTOBUF_CONSTEXPR Answer::Answer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.users_online_)*/nullptr
  , /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.op_)*/0
  , /*decltype(_impl_.response_status_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnswerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerDefaultTypeInternal() {}
  union {
    Answer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerDefaultTypeInternal _Answer_default_instance_;
PROTOBUF_CONSTEXPR User::User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDefaultTypeInternal _User_default_instance_;
PROTOBUF_CONSTEXPR NewUser::NewUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewUserDefaultTypeInternal() {}
  union {
    NewUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewUserDefaultTypeInternal _NewUser_default_instance_;
PROTOBUF_CONSTEXPR Status::Status(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_destination_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_private_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace chat_sistOS
static ::_pb::Metadata file_level_metadata_chat_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_chat_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chat_2eproto = nullptr;

const uint32_t TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UserList, _impl_.list_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UserList, _impl_.user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UsersOnline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UsersOnline, _impl_.users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UserOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UserOption, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UserOption, _impl_.createuser_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UserOption, _impl_.userlist_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UserOption, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::UserOption, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Answer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Answer, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Answer, _impl_.response_status_code_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Answer, _impl_.response_message_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Answer, _impl_.users_online_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Answer, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Answer, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Answer, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::User, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::User, _impl_.user_ip_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::User, _impl_.user_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::NewUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::NewUser, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::NewUser, _impl_.ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Status, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Status, _impl_.user_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Message, _impl_.message_private_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Message, _impl_.message_destination_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Message, _impl_.message_content_),
  PROTOBUF_FIELD_OFFSET(::chat_sistOS::Message, _impl_.message_sender_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::chat_sistOS::UserList)},
  { 8, -1, -1, sizeof(::chat_sistOS::UsersOnline)},
  { 15, -1, -1, sizeof(::chat_sistOS::UserOption)},
  { 26, -1, -1, sizeof(::chat_sistOS::Answer)},
  { 39, -1, -1, sizeof(::chat_sistOS::User)},
  { 48, -1, -1, sizeof(::chat_sistOS::NewUser)},
  { 56, -1, -1, sizeof(::chat_sistOS::Status)},
  { 64, -1, -1, sizeof(::chat_sistOS::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::chat_sistOS::_UserList_default_instance_._instance,
  &::chat_sistOS::_UsersOnline_default_instance_._instance,
  &::chat_sistOS::_UserOption_default_instance_._instance,
  &::chat_sistOS::_Answer_default_instance_._instance,
  &::chat_sistOS::_User_default_instance_._instance,
  &::chat_sistOS::_NewUser_default_instance_._instance,
  &::chat_sistOS::_Status_default_instance_._instance,
  &::chat_sistOS::_Message_default_instance_._instance,
};

const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nchat.proto\022\013chat_sistOS\"+\n\010UserList\022\014\n"
  "\004list\030\001 \001(\010\022\021\n\tuser_name\030\002 \001(\t\"/\n\013UsersO"
  "nline\022 \n\005users\030\001 \003(\0132\021.chat_sistOS.User\""
  "\267\001\n\nUserOption\022\n\n\002op\030\001 \001(\005\022(\n\ncreateUser"
  "\030\002 \001(\0132\024.chat_sistOS.NewUser\022\'\n\010userList"
  "\030\003 \001(\0132\025.chat_sistOS.UserList\022#\n\006status\030"
  "\004 \001(\0132\023.chat_sistOS.Status\022%\n\007message\030\005 "
  "\001(\0132\024.chat_sistOS.Message\"\351\001\n\006Answer\022\n\n\002"
  "op\030\001 \001(\005\022\034\n\024response_status_code\030\002 \001(\005\022\030"
  "\n\020response_message\030\003 \001(\t\022.\n\014users_online"
  "\030\004 \001(\0132\030.chat_sistOS.UsersOnline\022%\n\007mess"
  "age\030\005 \001(\0132\024.chat_sistOS.Message\022\037\n\004user\030"
  "\006 \001(\0132\021.chat_sistOS.User\022#\n\006status\030\007 \001(\013"
  "2\023.chat_sistOS.Status\">\n\004User\022\021\n\tuser_na"
  "me\030\001 \001(\t\022\017\n\007user_ip\030\002 \001(\t\022\022\n\nuser_state\030"
  "\003 \001(\005\"\'\n\007NewUser\022\020\n\010username\030\001 \001(\t\022\n\n\002IP"
  "\030\002 \001(\t\"/\n\006Status\022\021\n\tuser_name\030\001 \001(\t\022\022\n\nu"
  "ser_state\030\002 \001(\005\"p\n\007Message\022\027\n\017message_pr"
  "ivate\030\001 \001(\010\022\033\n\023message_destination\030\002 \001(\t"
  "\022\027\n\017message_content\030\003 \001(\t\022\026\n\016message_sen"
  "der\030\004 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_chat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chat_2eproto = {
    false, false, 817, descriptor_table_protodef_chat_2eproto,
    "chat.proto",
    &descriptor_table_chat_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_chat_2eproto::offsets,
    file_level_metadata_chat_2eproto, file_level_enum_descriptors_chat_2eproto,
    file_level_service_descriptors_chat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chat_2eproto_getter() {
  return &descriptor_table_chat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chat_2eproto(&descriptor_table_chat_2eproto);
namespace chat_sistOS {

// ===================================================================

class UserList::_Internal {
 public:
};

UserList::UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_sistOS.UserList)
}
UserList::UserList(const UserList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.list_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.list_ = from._impl_.list_;
  // @@protoc_insertion_point(copy_constructor:chat_sistOS.UserList)
}

inline void UserList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.list_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:chat_sistOS.UserList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void UserList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_sistOS.UserList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _impl_.list_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_sistOS.UserList.user_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_sistOS.UserList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool list = 1;
  if (this->_internal_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_list(), target);
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_sistOS.UserList.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_sistOS.UserList)
  return target;
}

size_t UserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_sistOS.UserList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // bool list = 1;
  if (this->_internal_list() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserList::GetClassData() const { return &_class_data_; }


void UserList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserList*>(&to_msg);
  auto& from = static_cast<const UserList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_sistOS.UserList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_list() != 0) {
    _this->_internal_set_list(from._internal_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_sistOS.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {
  return true;
}

void UserList::InternalSwap(UserList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  swap(_impl_.list_, other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[0]);
}

// ===================================================================

class UsersOnline::_Internal {
 public:
};

UsersOnline::UsersOnline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_sistOS.UsersOnline)
}
UsersOnline::UsersOnline(const UsersOnline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UsersOnline* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.users_){from._impl_.users_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chat_sistOS.UsersOnline)
}

inline void UsersOnline::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.users_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UsersOnline::~UsersOnline() {
  // @@protoc_insertion_point(destructor:chat_sistOS.UsersOnline)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UsersOnline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.users_.~RepeatedPtrField();
}

void UsersOnline::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UsersOnline::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_sistOS.UsersOnline)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.users_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsersOnline::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .chat_sistOS.User users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UsersOnline::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_sistOS.UsersOnline)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat_sistOS.User users = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_sistOS.UsersOnline)
  return target;
}

size_t UsersOnline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_sistOS.UsersOnline)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chat_sistOS.User users = 1;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->_impl_.users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsersOnline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UsersOnline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsersOnline::GetClassData() const { return &_class_data_; }


void UsersOnline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UsersOnline*>(&to_msg);
  auto& from = static_cast<const UsersOnline&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_sistOS.UsersOnline)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.users_.MergeFrom(from._impl_.users_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsersOnline::CopyFrom(const UsersOnline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_sistOS.UsersOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersOnline::IsInitialized() const {
  return true;
}

void UsersOnline::InternalSwap(UsersOnline* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.users_.InternalSwap(&other->_impl_.users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsersOnline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[1]);
}

// ===================================================================

class UserOption::_Internal {
 public:
  static const ::chat_sistOS::NewUser& createuser(const UserOption* msg);
  static const ::chat_sistOS::UserList& userlist(const UserOption* msg);
  static const ::chat_sistOS::Status& status(const UserOption* msg);
  static const ::chat_sistOS::Message& message(const UserOption* msg);
};

const ::chat_sistOS::NewUser&
UserOption::_Internal::createuser(const UserOption* msg) {
  return *msg->_impl_.createuser_;
}
const ::chat_sistOS::UserList&
UserOption::_Internal::userlist(const UserOption* msg) {
  return *msg->_impl_.userlist_;
}
const ::chat_sistOS::Status&
UserOption::_Internal::status(const UserOption* msg) {
  return *msg->_impl_.status_;
}
const ::chat_sistOS::Message&
UserOption::_Internal::message(const UserOption* msg) {
  return *msg->_impl_.message_;
}
UserOption::UserOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_sistOS.UserOption)
}
UserOption::UserOption(const UserOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserOption* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.createuser_){nullptr}
    , decltype(_impl_.userlist_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.op_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_createuser()) {
    _this->_impl_.createuser_ = new ::chat_sistOS::NewUser(*from._impl_.createuser_);
  }
  if (from._internal_has_userlist()) {
    _this->_impl_.userlist_ = new ::chat_sistOS::UserList(*from._impl_.userlist_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::chat_sistOS::Status(*from._impl_.status_);
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::chat_sistOS::Message(*from._impl_.message_);
  }
  _this->_impl_.op_ = from._impl_.op_;
  // @@protoc_insertion_point(copy_constructor:chat_sistOS.UserOption)
}

inline void UserOption::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.createuser_){nullptr}
    , decltype(_impl_.userlist_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.op_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserOption::~UserOption() {
  // @@protoc_insertion_point(destructor:chat_sistOS.UserOption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.createuser_;
  if (this != internal_default_instance()) delete _impl_.userlist_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.message_;
}

void UserOption::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserOption::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_sistOS.UserOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.createuser_ != nullptr) {
    delete _impl_.createuser_;
  }
  _impl_.createuser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.userlist_ != nullptr) {
    delete _impl_.userlist_;
  }
  _impl_.userlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  _impl_.op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserOption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chat_sistOS.NewUser createUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_createuser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chat_sistOS.UserList userList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_userlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chat_sistOS.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chat_sistOS.Message message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_sistOS.UserOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_op(), target);
  }

  // .chat_sistOS.NewUser createUser = 2;
  if (this->_internal_has_createuser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::createuser(this),
        _Internal::createuser(this).GetCachedSize(), target, stream);
  }

  // .chat_sistOS.UserList userList = 3;
  if (this->_internal_has_userlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::userlist(this),
        _Internal::userlist(this).GetCachedSize(), target, stream);
  }

  // .chat_sistOS.Status status = 4;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .chat_sistOS.Message message = 5;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_sistOS.UserOption)
  return target;
}

size_t UserOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_sistOS.UserOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .chat_sistOS.NewUser createUser = 2;
  if (this->_internal_has_createuser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.createuser_);
  }

  // .chat_sistOS.UserList userList = 3;
  if (this->_internal_has_userlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userlist_);
  }

  // .chat_sistOS.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .chat_sistOS.Message message = 5;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  // int32 op = 1;
  if (this->_internal_op() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserOption::GetClassData() const { return &_class_data_; }


void UserOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserOption*>(&to_msg);
  auto& from = static_cast<const UserOption&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_sistOS.UserOption)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_createuser()) {
    _this->_internal_mutable_createuser()->::chat_sistOS::NewUser::MergeFrom(
        from._internal_createuser());
  }
  if (from._internal_has_userlist()) {
    _this->_internal_mutable_userlist()->::chat_sistOS::UserList::MergeFrom(
        from._internal_userlist());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::chat_sistOS::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::chat_sistOS::Message::MergeFrom(
        from._internal_message());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserOption::CopyFrom(const UserOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_sistOS.UserOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOption::IsInitialized() const {
  return true;
}

void UserOption::InternalSwap(UserOption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserOption, _impl_.op_)
      + sizeof(UserOption::_impl_.op_)
      - PROTOBUF_FIELD_OFFSET(UserOption, _impl_.createuser_)>(
          reinterpret_cast<char*>(&_impl_.createuser_),
          reinterpret_cast<char*>(&other->_impl_.createuser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserOption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[2]);
}

// ===================================================================

class Answer::_Internal {
 public:
  static const ::chat_sistOS::UsersOnline& users_online(const Answer* msg);
  static const ::chat_sistOS::Message& message(const Answer* msg);
  static const ::chat_sistOS::User& user(const Answer* msg);
  static const ::chat_sistOS::Status& status(const Answer* msg);
};

const ::chat_sistOS::UsersOnline&
Answer::_Internal::users_online(const Answer* msg) {
  return *msg->_impl_.users_online_;
}
const ::chat_sistOS::Message&
Answer::_Internal::message(const Answer* msg) {
  return *msg->_impl_.message_;
}
const ::chat_sistOS::User&
Answer::_Internal::user(const Answer* msg) {
  return *msg->_impl_.user_;
}
const ::chat_sistOS::Status&
Answer::_Internal::status(const Answer* msg) {
  return *msg->_impl_.status_;
}
Answer::Answer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_sistOS.Answer)
}
Answer::Answer(const Answer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Answer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_message_){}
    , decltype(_impl_.users_online_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.op_){}
    , decltype(_impl_.response_status_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.response_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response_message().empty()) {
    _this->_impl_.response_message_.Set(from._internal_response_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_users_online()) {
    _this->_impl_.users_online_ = new ::chat_sistOS::UsersOnline(*from._impl_.users_online_);
  }
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::chat_sistOS::Message(*from._impl_.message_);
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::chat_sistOS::User(*from._impl_.user_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::chat_sistOS::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.op_, &from._impl_.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_status_code_) -
    reinterpret_cast<char*>(&_impl_.op_)) + sizeof(_impl_.response_status_code_));
  // @@protoc_insertion_point(copy_constructor:chat_sistOS.Answer)
}

inline void Answer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_message_){}
    , decltype(_impl_.users_online_){nullptr}
    , decltype(_impl_.message_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.op_){0}
    , decltype(_impl_.response_status_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.response_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Answer::~Answer() {
  // @@protoc_insertion_point(destructor:chat_sistOS.Answer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Answer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.users_online_;
  if (this != internal_default_instance()) delete _impl_.message_;
  if (this != internal_default_instance()) delete _impl_.user_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void Answer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Answer::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_sistOS.Answer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.users_online_ != nullptr) {
    delete _impl_.users_online_;
  }
  _impl_.users_online_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.response_status_code_) -
      reinterpret_cast<char*>(&_impl_.op_)) + sizeof(_impl_.response_status_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Answer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 response_status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.response_status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string response_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_response_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_sistOS.Answer.response_message"));
        } else
          goto handle_unusual;
        continue;
      // .chat_sistOS.UsersOnline users_online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_users_online(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chat_sistOS.Message message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chat_sistOS.User user = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chat_sistOS.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Answer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_sistOS.Answer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_op(), target);
  }

  // int32 response_status_code = 2;
  if (this->_internal_response_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_response_status_code(), target);
  }

  // string response_message = 3;
  if (!this->_internal_response_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_message().data(), static_cast<int>(this->_internal_response_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_sistOS.Answer.response_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_response_message(), target);
  }

  // .chat_sistOS.UsersOnline users_online = 4;
  if (this->_internal_has_users_online()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::users_online(this),
        _Internal::users_online(this).GetCachedSize(), target, stream);
  }

  // .chat_sistOS.Message message = 5;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // .chat_sistOS.User user = 6;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // .chat_sistOS.Status status = 7;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_sistOS.Answer)
  return target;
}

size_t Answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_sistOS.Answer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_message = 3;
  if (!this->_internal_response_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_message());
  }

  // .chat_sistOS.UsersOnline users_online = 4;
  if (this->_internal_has_users_online()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.users_online_);
  }

  // .chat_sistOS.Message message = 5;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  // .chat_sistOS.User user = 6;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // .chat_sistOS.Status status = 7;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // int32 op = 1;
  if (this->_internal_op() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_op());
  }

  // int32 response_status_code = 2;
  if (this->_internal_response_status_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response_status_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Answer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Answer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Answer::GetClassData() const { return &_class_data_; }


void Answer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Answer*>(&to_msg);
  auto& from = static_cast<const Answer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_sistOS.Answer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_response_message().empty()) {
    _this->_internal_set_response_message(from._internal_response_message());
  }
  if (from._internal_has_users_online()) {
    _this->_internal_mutable_users_online()->::chat_sistOS::UsersOnline::MergeFrom(
        from._internal_users_online());
  }
  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::chat_sistOS::Message::MergeFrom(
        from._internal_message());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::chat_sistOS::User::MergeFrom(
        from._internal_user());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::chat_sistOS::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  if (from._internal_response_status_code() != 0) {
    _this->_internal_set_response_status_code(from._internal_response_status_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Answer::CopyFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_sistOS.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  return true;
}

void Answer::InternalSwap(Answer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_message_, lhs_arena,
      &other->_impl_.response_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Answer, _impl_.response_status_code_)
      + sizeof(Answer::_impl_.response_status_code_)
      - PROTOBUF_FIELD_OFFSET(Answer, _impl_.users_online_)>(
          reinterpret_cast<char*>(&_impl_.users_online_),
          reinterpret_cast<char*>(&other->_impl_.users_online_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Answer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[3]);
}

// ===================================================================

class User::_Internal {
 public:
};

User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_sistOS.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.user_ip_){}
    , decltype(_impl_.user_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_ip().empty()) {
    _this->_impl_.user_ip_.Set(from._internal_user_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_state_ = from._impl_.user_state_;
  // @@protoc_insertion_point(copy_constructor:chat_sistOS.User)
}

inline void User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.user_ip_){}
    , decltype(_impl_.user_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

User::~User() {
  // @@protoc_insertion_point(destructor:chat_sistOS.User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
  _impl_.user_ip_.Destroy();
}

void User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_sistOS.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _impl_.user_ip_.ClearToEmpty();
  _impl_.user_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_sistOS.User.user_name"));
        } else
          goto handle_unusual;
        continue;
      // string user_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_sistOS.User.user_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 user_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.user_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_sistOS.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_sistOS.User.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // string user_ip = 2;
  if (!this->_internal_user_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_ip().data(), static_cast<int>(this->_internal_user_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_sistOS.User.user_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_ip(), target);
  }

  // int32 user_state = 3;
  if (this->_internal_user_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_sistOS.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_sistOS.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string user_ip = 2;
  if (!this->_internal_user_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_ip());
  }

  // int32 user_state = 3;
  if (this->_internal_user_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User::GetClassData() const { return &_class_data_; }


void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<User*>(&to_msg);
  auto& from = static_cast<const User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_sistOS.User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_user_ip().empty()) {
    _this->_internal_set_user_ip(from._internal_user_ip());
  }
  if (from._internal_user_state() != 0) {
    _this->_internal_set_user_state(from._internal_user_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_sistOS.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_ip_, lhs_arena,
      &other->_impl_.user_ip_, rhs_arena
  );
  swap(_impl_.user_state_, other->_impl_.user_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[4]);
}

// ===================================================================

class NewUser::_Internal {
 public:
};

NewUser::NewUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_sistOS.NewUser)
}
NewUser::NewUser(const NewUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.ip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat_sistOS.NewUser)
}

inline void NewUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.ip_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewUser::~NewUser() {
  // @@protoc_insertion_point(destructor:chat_sistOS.NewUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.ip_.Destroy();
}

void NewUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewUser::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_sistOS.NewUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_sistOS.NewUser.username"));
        } else
          goto handle_unusual;
        continue;
      // string IP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_sistOS.NewUser.IP"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_sistOS.NewUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_sistOS.NewUser.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string IP = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_sistOS.NewUser.IP");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_sistOS.NewUser)
  return target;
}

size_t NewUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_sistOS.NewUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string IP = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewUser::GetClassData() const { return &_class_data_; }


void NewUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewUser*>(&to_msg);
  auto& from = static_cast<const NewUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_sistOS.NewUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewUser::CopyFrom(const NewUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_sistOS.NewUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewUser::IsInitialized() const {
  return true;
}

void NewUser::InternalSwap(NewUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NewUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[5]);
}

// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_sistOS.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Status* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.user_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_state_ = from._impl_.user_state_;
  // @@protoc_insertion_point(copy_constructor:chat_sistOS.Status)
}

inline void Status::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_name_){}
    , decltype(_impl_.user_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:chat_sistOS.Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_name_.Destroy();
}

void Status::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_sistOS.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_name_.ClearToEmpty();
  _impl_.user_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_sistOS.Status.user_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 user_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_sistOS.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_sistOS.Status.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // int32 user_state = 2;
  if (this->_internal_user_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_sistOS.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_sistOS.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int32 user_state = 2;
  if (this->_internal_user_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }


void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_sistOS.Status)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_user_state() != 0) {
    _this->_internal_set_user_state(from._internal_user_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_sistOS.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  swap(_impl_.user_state_, other->_impl_.user_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[6]);
}

// ===================================================================

class Message::_Internal {
 public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_sistOS.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_destination_){}
    , decltype(_impl_.message_content_){}
    , decltype(_impl_.message_sender_){}
    , decltype(_impl_.message_private_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_destination_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_destination().empty()) {
    _this->_impl_.message_destination_.Set(from._internal_message_destination(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_content().empty()) {
    _this->_impl_.message_content_.Set(from._internal_message_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_sender().empty()) {
    _this->_impl_.message_sender_.Set(from._internal_message_sender(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.message_private_ = from._impl_.message_private_;
  // @@protoc_insertion_point(copy_constructor:chat_sistOS.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_destination_){}
    , decltype(_impl_.message_content_){}
    , decltype(_impl_.message_sender_){}
    , decltype(_impl_.message_private_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_destination_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_destination_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:chat_sistOS.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_destination_.Destroy();
  _impl_.message_content_.Destroy();
  _impl_.message_sender_.Destroy();
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_sistOS.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_destination_.ClearToEmpty();
  _impl_.message_content_.ClearToEmpty();
  _impl_.message_sender_.ClearToEmpty();
  _impl_.message_private_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool message_private = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.message_private_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message_destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message_destination();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_sistOS.Message.message_destination"));
        } else
          goto handle_unusual;
        continue;
      // string message_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_sistOS.Message.message_content"));
        } else
          goto handle_unusual;
        continue;
      // string message_sender = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_sistOS.Message.message_sender"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_sistOS.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool message_private = 1;
  if (this->_internal_message_private() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_message_private(), target);
  }

  // string message_destination = 2;
  if (!this->_internal_message_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_destination().data(), static_cast<int>(this->_internal_message_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_sistOS.Message.message_destination");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_destination(), target);
  }

  // string message_content = 3;
  if (!this->_internal_message_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_content().data(), static_cast<int>(this->_internal_message_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_sistOS.Message.message_content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_content(), target);
  }

  // string message_sender = 4;
  if (!this->_internal_message_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_sender().data(), static_cast<int>(this->_internal_message_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_sistOS.Message.message_sender");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_sender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_sistOS.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_sistOS.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_destination = 2;
  if (!this->_internal_message_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_destination());
  }

  // string message_content = 3;
  if (!this->_internal_message_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_content());
  }

  // string message_sender = 4;
  if (!this->_internal_message_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_sender());
  }

  // bool message_private = 1;
  if (this->_internal_message_private() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_sistOS.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_destination().empty()) {
    _this->_internal_set_message_destination(from._internal_message_destination());
  }
  if (!from._internal_message_content().empty()) {
    _this->_internal_set_message_content(from._internal_message_content());
  }
  if (!from._internal_message_sender().empty()) {
    _this->_internal_set_message_sender(from._internal_message_sender());
  }
  if (from._internal_message_private() != 0) {
    _this->_internal_set_message_private(from._internal_message_private());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_sistOS.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_destination_, lhs_arena,
      &other->_impl_.message_destination_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_content_, lhs_arena,
      &other->_impl_.message_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_sender_, lhs_arena,
      &other->_impl_.message_sender_, rhs_arena
  );
  swap(_impl_.message_private_, other->_impl_.message_private_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chat_sistOS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chat_sistOS::UserList*
Arena::CreateMaybeMessage< ::chat_sistOS::UserList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_sistOS::UserList >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_sistOS::UsersOnline*
Arena::CreateMaybeMessage< ::chat_sistOS::UsersOnline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_sistOS::UsersOnline >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_sistOS::UserOption*
Arena::CreateMaybeMessage< ::chat_sistOS::UserOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_sistOS::UserOption >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_sistOS::Answer*
Arena::CreateMaybeMessage< ::chat_sistOS::Answer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_sistOS::Answer >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_sistOS::User*
Arena::CreateMaybeMessage< ::chat_sistOS::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_sistOS::User >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_sistOS::NewUser*
Arena::CreateMaybeMessage< ::chat_sistOS::NewUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_sistOS::NewUser >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_sistOS::Status*
Arena::CreateMaybeMessage< ::chat_sistOS::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_sistOS::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_sistOS::Message*
Arena::CreateMaybeMessage< ::chat_sistOS::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_sistOS::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
